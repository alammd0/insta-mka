// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String?
  phone        String?        @unique
  password     String
  username     String?        @unique
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  profile      Profile?
  notification Notification[]

  followers Follow[] @relation("followers")
  following Follow[] @relation("following")

  sentNotifications     Notification[] @relation("Sender")
  receivedNotifications Notification[] @relation("Receiver")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        String   @id @default(cuid())
  bio       String?
  avatar    String?
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          String    @id @default(cuid())
  title       String
  description String?
  image       String?
  location    String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  comment   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Notification {
  id         String   @id @default(uuid())
  type       String // "like", "comment", "follow"
  message    String
  senderId   String
  receiverId String
  postId     String? // only for like/comment
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User    @relation("Sender", fields: [senderId], references: [id])
  receiver User    @relation("Receiver", fields: [receiverId], references: [id])
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
}
